from typing import List, Optional, Protocol, runtime_checkable
import discord
from .types import CommandExecutionResult


@runtime_checkable
class ICommand(Protocol):
    @property
    def name(self) -> str: ...
    @property
    def description(self) -> str: ...
    @property
    def trigger(self) -> str: ...
    async def execute(self, message: discord.Message) -> CommandExecutionResult: ...


@runtime_checkable
class ICommandRegistry(Protocol):
    async def register(self, command: ICommand) -> None: ...
    async def get_command(self, trigger: str) -> Optional[ICommand]: ...
    async def get_all_commands(self) -> List[ICommand]: ...
    async def has_command(self, trigger: str) -> bool: ...
    async def unregister(self, trigger: str) -> bool: ...
    async def clear(self) -> None: ...


@runtime_checkable
class IBotStats(Protocol):
    async def increment_commands_executed(self) -> None: ...
    async def increment_messages_processed(self) -> None: ...
    async def update_last_activity(self) -> None: ...
    async def get_uptime(self) -> float: ...
    async def get_ping(self) -> float: ...


@runtime_checkable
class IDiscordService(Protocol):
    async def start(self) -> None: ...
    async def stop(self) -> None: ...
    async def register_command(self, command: ICommand) -> None: ...
    def get_client(self) -> discord.Client: ...


@runtime_checkable
class ITokenValidator(Protocol):
    async def validate_format(self, token: str) -> bool: ...
    async def validate_api(self, token: str) -> bool: ...
    async def extract_info(self, token: str) -> dict: ...


@runtime_checkable
class IConfigService(Protocol):
    @property
    def discord_token(self) -> str: ...
    @property
    def is_development(self) -> bool: ...
    @property
    def is_production(self) -> bool: ...
    @property
    def log_level(self) -> str: ...
